if(!option){
return(f_absolute)
}else{
return(probability)
}
}
partitionMPR(serie,3,1,1)
euclidian_distance<-function(probability){
c = rep(1/length(probability),length(probability))
distance = sum((probability-c)^2)
return(sqrt(distance))
}
euclidian_quadratica_distance<-function(probability){
c = rep(1/length(probability),length(probability))
distance = sum((probability-c)^2)
return(distance)
}
manhattan_distance<-function(probability){
c = rep(1/length(probability),length(probability))
distance = sum(abs(probability-c))
return(distance)
}
chebyshev_distance<-function(probability){
c = rep(1/length(probability),length(probability))
L = abs(probability - c)
return(max(L))
}
kullback_leibler_divergence<-function(probability){
c = rep(1/length(probability),length(probability))
distance <- probability * log(probability/c)
distance[is.nan(distance)] <- 0
return(sum(distance))
}
kullbach_aux<-function(p,q){
distance <- p * log(p/q)
distance[is.nan(distance)||is.infinite(distance)]<-0
return(sum(distance))
}
hellinger_Distance<-function(probability){
c = rep(1/length(probability),length(probability))
distance = sum((sqrt(probability)-sqrt(c))^2)*0.5
return(sqrt(distance))
}
jensenDivergence<-function(p){
q = rep(1/length(p),length(p))
s_p = shannonEntropy(p)
s_q = shannonEntropy(q)
s_pq = shannonEntropy((p+q)/2)
divergence = sum( s_pq - (s_p/2) - (s_q/2))
return(divergence)
}
constant <- function(p){
v1 = (0.5)/length(p)
aux1 = (0.5 + v1) * log(0.5 + v1)
aux2 = (length(p) - 1) * v1 * log(v1)
aux3 = (1 - 0.5) * log(length(p))
q03 = -1/(aux1 + aux2 + aux3)
return(q03)
}
Ccomplexity<-function(p){
c <- jensenDivergence(p) * constant(p) *
shannonEntropyNormalized(p)
return(c)
}
wootters_distance<-function(probability,q){
c = rep(1/length(probability),length(probability))
dis = sum(sqrt(probability*c))
dis = acos(dis)
return(dis)
}
complexityF<-function(probability){
entropy = ShannonAux(probability)
qInitial = rep(1/length(probability),length(probability))
qInitial[1] = 1
desequilibrium = jensenDivergence(qInitial) *
jensenDivergence(probability)
comp = entropy * desequilibrium
return(comp)
}
partitionMPR(serie,3,1,1)
library(ggplot2)
#source(file.path('Entropys.R'))
#source(file.path('Distances.R'))
#source(file.path('Read.R'))
#source(file.path('GraficoG.R'))
#source(file.path('teste.R'))
require(ggthemes)
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt2(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt2(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt2(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt2(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = Ccomplexity(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = Ccomplexity(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Plane Complexity Entropy") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
partitionMPR(serie,3,1,1)
#Leitura de dados em arquivos#
#Leitura do arquivo .txt e armazenamento do conteúdo em um array#
Read_txt<-function(name,column){
data = read.table(name, stringsAsFactors=FALSE, fileEncoding="latin1")
data = data[,column]
if(mode(data)=="character"){
data = type.convert(data)
}
data = na.omit(data)
return(data)
}
Read_txt2<-function(column){
data = read.table(file.choose())
data = data[,column]
data = na.omit(data)
return(data)
}
#Leitura do arquivo .csv e armazenamento do conteúdo em um array#
Read_csv<-function(column,separador=";"){
data=read.csv(file.choose(), stringsAsFactors=T, fileEncoding="latin1",sep=separador)
data = data[,column]
if(mode(data)=="character"){
data = type.convert(data)
}
data = na.omit(data)
return(data)
}
partitionMPR(serie,3,1,1)
setwd("C:/Users/Eduarda/Dropbox/LaCCAN/GITHUB/Time_series_analysis_R/Data/HCPlane")
partitionMPR(serie,3,1,1)
library(ggplot2)
#source(file.path('Entropys.R'))
#source(file.path('Distances.R'))
#source(file.path('Read.R'))
#source(file.path('GraficoG.R'))
#source(file.path('teste.R'))
require(ggthemes)
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = Ccomplexity(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = Ccomplexity(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Plane Complexity Entropy") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
Q
library(ggplot2)
#source(file.path('Entropys.R'))
#source(file.path('Distances.R'))
#source(file.path('Read.R'))
#source(file.path('GraficoG.R'))
#source(file.path('teste.R'))
require(ggthemes)
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = Ccomplexity(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = Ccomplexity(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Plane Complexity Entropy") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
library(ggplot2)
#source(file.path('Entropys.R'))
#source(file.path('Distances.R'))
#source(file.path('Read.R'))
#source(file.path('GraficoG.R'))
#source(file.path('teste.R'))
require(ggthemes)
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = Ccomplexity(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = Ccomplexity(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Entropy-Complexity Plane") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
partitionMPR(serie,3,1,1)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
#source(file.path('Entropys.R'))
#source(file.path('Distances.R'))
#source(file.path('Read.R'))
#source(file.path('GraficoG.R'))
#source(file.path('teste.R'))
require(ggthemes)
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = Ccomplexity(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = Ccomplexity(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Entropy-Complexity Plane") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
library(ggplot2)
#source(file.path('Entropys.R'))
#source(file.path('Distances.R'))
#source(file.path('Read.R'))
#source(file.path('GraficoG.R'))
#source(file.path('teste.R'))
require(ggthemes)
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = Ccomplexity(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = Ccomplexity(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Entropy-Complexity Plane") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
partitionMPR(serie,3,1,1)
