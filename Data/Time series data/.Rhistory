nletters$setWidthChars(5)
label$setMnemonicWidget(nletters)
boxH4$packStart(nletters,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Partitions:")
boxH4$packStart(label,expand =T ,fill=T,0)
partitions = gtkEntryNew()
partitions$setWidthChars(5)
label$setMnemonicWidget(partitions)
boxH4$packStart(partitions,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Number of points:")
boxH5$packStart(label,expand =T ,fill=T,0)
number = gtkEntryNew()
number$setWidthChars(5)
label$setMnemonicWidget(number)
boxH5$packStart(number,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Distribution:")
boxH5$packStart(label,expand =T ,fill=T,0)
typesDistribution<-rGtkDataFrame(c("Band and Pompe" , "Bandt and Pompe weigth"))
combobox2 <- gtkComboBox(typesDistribution)
crt1 <- gtkCellRendererText()
combobox2$packStart(crt1)
combobox2$addAttribute(crt1, "text", 0)
gtkComboBoxSetActive(combobox2,0)
label$setMnemonicWidget(combobox2)
boxH5$packStart(combobox2,expand =T ,fill=T,0)
op1 <- gtkButton("Calculate")
boxH7$packStart(op1,expand =T,fill=T,0)
labelResult = gtkLabelNewWithMnemonic("Result: ")
boxH7$packStart(labelResult,expand =T ,fill=T,0)
value<-gtkEntryNew()
boxH7$packStart(value,expand =T ,fill=T,0)
visul<-function(){
w <- gwindow("Result", visible=FALSE)
g <- ggroup(container=w)
gg <- ggraphics(container=g)
}
readData<-function(){
data = read.table("ddt.txt")
data = data[,1]
data = na.omit(data)
return(data)
}
fileChoose<- function(button){
data = Read_csv(2)
write.table(data,"ddt.txt")
#showOptions()
}
result<-function(button)
{
myResult = gtkComboBoxGetActive(combobox1)
alert = 0
time = readData()
missingParameter = "The desired functionality could not be performed, the parameters are missing:"
if(go == 1){
print("oi")
labelResult$destroy()
}
if((myResult == 3) ||(myResult == 4) ||(myResult == 5) || (myResult == 6) ||(myResult == 7) ||(myResult == 11) ||
(myResult == 0) ||(myResult == 12) ||(myResult == 16) ||(myResult == 22) ||(myResult == 8)){ #Pronto
if((delay$getText()!="")){
if(gtkComboBoxGetActive(combobox2)==0){
probability = distribution(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())),1)
}else{
probability = WPE(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}
if(myResult == 3){
finalResult = euclidian_distance(probability)
}else if(myResult == 4){
finalResult = euclidian_quadratica_distance(probability)
}else if(myResult == 5){
finalResult = manhattan_distance(probability)
}else if(myResult == 6){
finalResult = chebyshev_distance(probability)
}else if(myResult == 7){
finalResult = hellinger_Distance(probability)
}else if(myResult == 11){
finalResult = Ccomplexity(probability)
}else if(myResult == 0){
finalResult = shannonEntropy(probability)
}else if(myResult == 12){
finalResult = PMEUnidimensional(probability)
}else if(myResult == 16){
finalResult = WPE(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}else if(myResult == 18){
finalResult = probability
}else if(myResult == 23){
histogram(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}else if(myResult == 8){
finalResult = jensenDivergence(probability)
}
}else if((delay$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay and distribution.")
}
}else if((myResult == 10) ||(myResult == 9) ||(myResult == 1) || (myResult == 2)){ #Pronto
if((delay$getText()!="")&&(q$getText()!="")){
if(gtkComboBoxGetActive(combobox2)==0){
probability = distribution(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())),1)
}else{
probability = WPE(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}
if(myResult == 10){
finalResult = kullback_leibler_divergence(probability)
}else if(myResult == 9){
finalResult = wootters_distance(probability,eval(parse(text=q$getText())))
}else if(myResult == 1){
finalResult = tsallisEntropy(probability,eval(parse(text=q$getText())))
}else if(myResult == 2){
finalResult = renyiEntropy(probability,eval(parse(text=q$getText())))
}
}else if((delay$getText()=="")||(q$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay, q and distribution.")
}
}else if((myResult == 21)){
if((pattern$getText()!="")&&(number$getText()!="")){
patternsOnGraph(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())),eval(parse(text=number$getText())))
}else if((pattern$getText()=="")||(number$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Pattern and number of points.")
}
}else if((myResult == 13)){
if((nletters$getText()!="")&&(partitions$getText()!="")){
saxPlot(time,eval(parse(text=nletters$getText())),eval(parse(text=partitions$getText())))
}else if((nletters$getText()=="")||(partitions$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Letters and partitions.")
}
}else if((myResult == 14)){
if((number$getText()!="")){
PIP(time,eval(parse(text = number$getText())))
}else{
alert = 1
missingParameter = paste(missingParameter," Number of points.")
}
}else if((myResult == 15)){
if((partitions$getText()!="")){
plotPAA(time,eval(parse(text=partitions$getText())))
}else{
alert = 1
missingParameter = paste(missingParameter," Partitions.")
}
}else if((myResult == 18)){
if((delay$getText()!="")&&(q$getText()!="")&&(partitions$getText()!="")){
dialog <- gtkMessageDialog(NULL, "destroy-with-parent","question", "ok", "What entropy and distribution should be used in the process?")
choicesE <- c("Shannon entropy" , "Tsallis entropy", "Renyi entropy","Min entropy")
radio_buttons <- NULL
vbox <- gtkVBox(TRUE, 2)
for (choice in choicesE) {
button <- gtkRadioButton(radio_buttons, choice)
vbox$add(button)
radio_buttons <- c(radio_buttons, button)
}
frame <- gtkFrame("Entropys")
frame$add(vbox)
dialog[["vbox"]]$add(frame)
if (dialog$run() == GtkResponseType["ok"]) dialog$destroy()
entropyPlane(eval(parse(text=partitions$getText())),gtkComboBoxGetActive(dimension)+3,eval(parse(text=delay$getText())),1,1,eval(parse(text=q$getText())))
}else if((delay$getText()=="")||(q$getText()=="")||(partitions$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay, q, distribution and partitions.")
}
}else if((myResult == 19)){
if((delay$getText()!="")&&(partitions$getText()!="")){
partitionMPR(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text=delay$getText())),eval(parse(text=partitions$getText())))
}else if((delay$getText()=="")||(partitions$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay and partitions.")
}
}else if(myResult == 17){ #Pronto
finalResult = equalitiesValues(time)
}else if(myResult == 20){
w <- gwindow("Result", visible=TRUE)
g <- ggroup(container=w)
gg <- ggraphics(container=g)
time_series(time)
}
if(alert==1){
dialog <- gtkMessageDialog(NULL, "destroy-with-parent","info", "ok", missingParameter)
if (dialog$run() == GtkResponseType["ok"]) dialog$destroy()
}
result = as.character(finalResult)
value$setText(result)
}
gSignalConnect(choose, "clicked", fileChoose)
gSignalConnect(op1, "clicked", result)
win <- gtkWindow(show = FALSE)
graphics <- gtkDrawingArea()
slider <- gtkHScale(min = 0.1, max = 1.00, step = 0.1)
vbox <- gtkVBox()
vbox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)
vbox$packStart(slider, expand = FALSE, fill = FALSE, padding = 0)
win$add(vbox)win$setDefaultSize(400,400)
win$showAll()
win <- gtkWindow(show = FALSE)
graphics <- gtkDrawingArea()
slider <- gtkHScale(min = 0.1, max = 1.00, step = 0.1)
vbox <- gtkVBox()
vbox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)
vbox$packStart(slider, expand = FALSE, fill = FALSE, padding = 0)
win$add(vbox)win$setDefaultSize(400,400)
win$showAll()
win <- gtkWindow(show = FALSE)
graphics <- gtkDrawingArea()
slider <- gtkHScale(min = 0.1, max = 1.00, step = 0.1)
vbox <- gtkVBox()
vbox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)
vbox$packStart(slider, expand = FALSE, fill = FALSE, padding = 0)
win$add(vbox)
win$setDefaultSize(400,400)
win <- gtkWindow(show = FALSE)
graphics <- gtkDrawingArea()
slider <- gtkHScale(min = 0.1, max = 1.00, step = 0.1)
vbox <- gtkVBox()
vbox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)
vbox$packStart(slider, expand = FALSE, fill = FALSE, padding = 0)
win$add(vbox)
win$setDefaultSize(400,400)
win$showAll()
win <- gtkWindow(show = FALSE)
graphics <- gtkDrawingArea()
slider <- gtkHScale(min = 0.1, max = 1.00, step = 0.1)
vbox <- gtkVBox()
vbox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)
vbox$packStart(slider, expand = FALSE, fill = FALSE, padding = 0)
win$add(vbox)
win$setDefaultSize(400,400)
win$showAll()
win <- gtkWindow(show = FALSE)
graphics <- gtkDrawingArea()
slider <- gtkHScale(min = 0.1, max = 1.00, step = 0.1)
vbox <- gtkVBox()
vbox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)
vbox$packStart(slider, expand = FALSE, fill = FALSE, padding = 0)
win$add(vbox)
win$setDefaultSize(400,400)
win$showAll()
time_series(dd)
w <- gwindow("Result", visible=FALSE)
g <- ggroup(container=w)
gg <- ggraphics(container=g)
addHandlerChanged(gg, handler=function(h,...) {
})
visible(w) <- TRUE
time_series(dd)
require(RGtk2)
library(gWidgets)
options(guiToolkit="RGtk2")
window <- gtkWindow()
window["title"] <- "Time Series Analysis"
frame <- gtkFrameNew()
window$add(frame)
box1 <- gtkVBoxNew()
box1$setBorderWidth(80)
frame$add(box1)
boxLabel <- gtkHBoxNew(homogeneous = FALSE,spacing= 5) #distance between elements
boxLabel$setBorderWidth(20)
box1$packStart(boxLabel)
boxH2 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH2$setBorderWidth(0)
box1$packStart(boxH2)
boxH3 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH3$setBorderWidth(0)
box1$packStart(boxH3)
boxH4 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH4$setBorderWidth(0)
box1$packStart(boxH4)
boxH5 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH5$setBorderWidth(0)
box1$packStart(boxH5)
boxH6 <- gtkHBoxNew(homogeneous = FALSE,spacing= 0) #distance between elements
boxH6$setBorderWidth(0)
box1$packStart(boxH6)
boxH7 <- gtkHBoxNew(homogeneous = FALSE,spacing= 5) #distance between elements
boxH7$setBorderWidth(20)
box1$packStart(boxH7)
filename<-gtkEntryNew()
filename$setText("Time Series name")
boxLabel$packStart(filename,expand =T ,fill=T,0)
choose <- gtkButton("Choose file") #button choose file
boxLabel$packStart(choose,expand =F ,fill=F)
label = gtkLabelNewWithMnemonic("Function:")
boxLabel$packStart(label,expand =T ,fill=T,0)
typesDistribution<-rGtkDataFrame(c("Shannon Entropy" , "Tsallis Entropy", "Renyi Entropy","Euclidian Distance","Quadratic Euclidian Distance"
,"Manhattan Distance","Chebyshev Distance","Hellinger Distance","Jensen Divergence","Wootter Distance","Kullback Leibler Divergence",
"Statistical Complexity","Permutation Min Entropy","Symbolic Aggregate Approximation","Perceptually Important Points","Piecewise Aggregate Approximation",
"Bandt and Pompe Weigth","Equalities Values","Entropy Plane","HC Plane","Time Series Plane","Patterns on Graph","Histogram"))
combobox1 <- gtkComboBox(typesDistribution)
crt1 <- gtkCellRendererText()
combobox1$packStart(crt1)
combobox1$addAttribute(crt1, "text", 0)
gtkComboBoxSetActive(combobox1,0)
label$setMnemonicWidget(combobox1)
boxLabel$packStart(combobox1,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Dimension:")
boxH2$packStart(label,expand =T ,fill=T,0)
typesDistribution<-rGtkDataFrame(c("3","4","5","6"))
dimension <- gtkComboBox(typesDistribution)
crt1 <- gtkCellRendererText()
dimension$packStart(crt1)
dimension$addAttribute(crt1, "text", 0)
gtkComboBoxSetActive(dimension,0)
label$setMnemonicWidget(dimension)
boxH2$packStart(dimension,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Delay:")
boxH2$packStart(label,expand =T ,fill=T,0)
delay = gtkEntryNew()
delay$setWidthChars(5)
label$setMnemonicWidget(delay)
boxH2$packStart(delay,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Q:")
boxH3$packStart(label,expand =T ,fill=T,0)
q = gtkEntryNew()
q$setWidthChars(5)
label$setMnemonicWidget(q)
boxH3$packStart(q,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Pattern:")
boxH3$packStart(label,expand =T ,fill=T,0)
pattern = gtkEntryNew()
pattern$setWidthChars(5)
label$setMnemonicWidget(pattern)
boxH3$packStart(pattern,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Letters:")
boxH4$packStart(label,expand =T ,fill=T,0)
nletters = gtkEntryNew()
nletters$setWidthChars(5)
label$setMnemonicWidget(nletters)
boxH4$packStart(nletters,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Partitions:")
boxH4$packStart(label,expand =T ,fill=T,0)
partitions = gtkEntryNew()
partitions$setWidthChars(5)
label$setMnemonicWidget(partitions)
boxH4$packStart(partitions,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Number of points:")
boxH5$packStart(label,expand =T ,fill=T,0)
number = gtkEntryNew()
number$setWidthChars(5)
label$setMnemonicWidget(number)
boxH5$packStart(number,expand =T ,fill=T,0)
label = gtkLabelNewWithMnemonic("Distribution:")
boxH5$packStart(label,expand =T ,fill=T,0)
typesDistribution<-rGtkDataFrame(c("Band and Pompe" , "Bandt and Pompe weigth"))
combobox2 <- gtkComboBox(typesDistribution)
crt1 <- gtkCellRendererText()
combobox2$packStart(crt1)
combobox2$addAttribute(crt1, "text", 0)
gtkComboBoxSetActive(combobox2,0)
label$setMnemonicWidget(combobox2)
boxH5$packStart(combobox2,expand =T ,fill=T,0)
op1 <- gtkButton("Calculate")
boxH7$packStart(op1,expand =T,fill=T,0)
labelResult = gtkLabelNewWithMnemonic("Result: ")
boxH7$packStart(labelResult,expand =T ,fill=T,0)
value<-gtkEntryNew()
boxH7$packStart(value,expand =T ,fill=T,0)
visul<-function(){
w <- gwindow("Result", visible=FALSE)
g <- ggroup(container=w)
gg <- ggraphics(container=g)
}
readData<-function(){
data = read.table("ddt.txt")
data = data[,1]
data = na.omit(data)
return(data)
}
fileChoose<- function(button){
data = Read_csv(2)
write.table(data,"ddt.txt")
#showOptions()
}
result<-function(button)
{
myResult = gtkComboBoxGetActive(combobox1)
alert = 0
time = readData()
missingParameter = "The desired functionality could not be performed, the parameters are missing:"
if(go == 1){
print("oi")
labelResult$destroy()
}
if((myResult == 3) ||(myResult == 4) ||(myResult == 5) || (myResult == 6) ||(myResult == 7) ||(myResult == 11) ||
(myResult == 0) ||(myResult == 12) ||(myResult == 16) ||(myResult == 22) ||(myResult == 8)){ #Pronto
if((delay$getText()!="")){
if(gtkComboBoxGetActive(combobox2)==0){
probability = distribution(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())),1)
}else{
probability = WPE(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}
if(myResult == 3){
finalResult = euclidian_distance(probability)
}else if(myResult == 4){
finalResult = euclidian_quadratica_distance(probability)
}else if(myResult == 5){
finalResult = manhattan_distance(probability)
}else if(myResult == 6){
finalResult = chebyshev_distance(probability)
}else if(myResult == 7){
finalResult = hellinger_Distance(probability)
}else if(myResult == 11){
finalResult = Ccomplexity(probability)
}else if(myResult == 0){
finalResult = shannonEntropy(probability)
}else if(myResult == 12){
finalResult = PMEUnidimensional(probability)
}else if(myResult == 16){
finalResult = WPE(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}else if(myResult == 18){
finalResult = probability
}else if(myResult == 23){
histogram(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}else if(myResult == 8){
finalResult = jensenDivergence(probability)
}
}else if((delay$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay and distribution.")
}
}else if((myResult == 10) ||(myResult == 9) ||(myResult == 1) || (myResult == 2)){ #Pronto
if((delay$getText()!="")&&(q$getText()!="")){
if(gtkComboBoxGetActive(combobox2)==0){
probability = distribution(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())),1)
}else{
probability = WPE(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())))
}
if(myResult == 10){
finalResult = kullback_leibler_divergence(probability)
}else if(myResult == 9){
finalResult = wootters_distance(probability,eval(parse(text=q$getText())))
}else if(myResult == 1){
finalResult = tsallisEntropy(probability,eval(parse(text=q$getText())))
}else if(myResult == 2){
finalResult = renyiEntropy(probability,eval(parse(text=q$getText())))
}
}else if((delay$getText()=="")||(q$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay, q and distribution.")
}
}else if((myResult == 21)){
if((pattern$getText()!="")&&(number$getText()!="")){
patternsOnGraph(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text = delay$getText())),eval(parse(text=number$getText())))
}else if((pattern$getText()=="")||(number$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Pattern and number of points.")
}
}else if((myResult == 13)){
if((nletters$getText()!="")&&(partitions$getText()!="")){
saxPlot(time,eval(parse(text=nletters$getText())),eval(parse(text=partitions$getText())))
}else if((nletters$getText()=="")||(partitions$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Letters and partitions.")
}
}else if((myResult == 14)){
if((number$getText()!="")){
PIP(time,eval(parse(text = number$getText())))
}else{
alert = 1
missingParameter = paste(missingParameter," Number of points.")
}
}else if((myResult == 15)){
if((partitions$getText()!="")){
plotPAA(time,eval(parse(text=partitions$getText())))
}else{
alert = 1
missingParameter = paste(missingParameter," Partitions.")
}
}else if((myResult == 18)){
if((delay$getText()!="")&&(q$getText()!="")&&(partitions$getText()!="")){
dialog <- gtkMessageDialog(NULL, "destroy-with-parent","question", "ok", "What entropy and distribution should be used in the process?")
choicesE <- c("Shannon entropy" , "Tsallis entropy", "Renyi entropy","Min entropy")
radio_buttons <- NULL
vbox <- gtkVBox(TRUE, 2)
for (choice in choicesE) {
button <- gtkRadioButton(radio_buttons, choice)
vbox$add(button)
radio_buttons <- c(radio_buttons, button)
}
frame <- gtkFrame("Entropys")
frame$add(vbox)
dialog[["vbox"]]$add(frame)
if (dialog$run() == GtkResponseType["ok"]) dialog$destroy()
entropyPlane(eval(parse(text=partitions$getText())),gtkComboBoxGetActive(dimension)+3,eval(parse(text=delay$getText())),1,1,eval(parse(text=q$getText())))
}else if((delay$getText()=="")||(q$getText()=="")||(partitions$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay, q, distribution and partitions.")
}
}else if((myResult == 19)){
if((delay$getText()!="")&&(partitions$getText()!="")){
partitionMPR(time,gtkComboBoxGetActive(dimension)+3,eval(parse(text=delay$getText())),eval(parse(text=partitions$getText())))
}else if((delay$getText()=="")||(partitions$getText()=="")){
alert = 1
missingParameter = paste(missingParameter," Dimension, delay and partitions.")
}
}else if(myResult == 17){ #Pronto
finalResult = equalitiesValues(time)
}else if(myResult == 20){
w <- gwindow("Result", visible=TRUE)
g <- ggroup(container=w)
gg <- ggraphics(container=g)
time_series(time)
}
if(alert==1){
dialog <- gtkMessageDialog(NULL, "destroy-with-parent","info", "ok", missingParameter)
if (dialog$run() == GtkResponseType["ok"]) dialog$destroy()
}
result = as.character(finalResult)
value$setText(result)
}
gSignalConnect(choose, "clicked", fileChoose)
gSignalConnect(op1, "clicked", result)
time_series(dd)
