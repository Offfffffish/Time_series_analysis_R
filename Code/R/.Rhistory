}
else{
for(j in 1:dimension){
lengthW=lengthW+1
point_value[lengthW]=elements[i,j]
point_time[lengthW]=index[i,j]
}
}
}
}
if(lengthW!=0){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5)) +
geom_point(aes(x=point_time[1:lengthW],y=point_value[1:lengthW]),color="blue")
}else{
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
}
histogram<-function(serie,dimension,delay){
fat=factorial(dimension)
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbol <- definePatterns(dimension)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbol[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbol)
}
histogramImage<-function(myImg,dimx,dimy,delx,dely,dimension=0){
if(!dimension){
dimension=dim(myImg)[1]
}
d = dimX*dimY
fat = factorial(d)
p_patterns <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension)
n_symbols <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension, 1)
symbols <- definePatterns(d)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbols[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbols)
}
library(combinat)
library(ggplot2)
library(dygraphs)
time_series<-function(serie){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
interactiveGraph-function(serie){
dygraph(a,main="Graphic of time series",xlab="Time",ylab="Serie")
}
#Points == 0 -> first point
#Points != 0 -> all points
patternsOnGraph<-function(serie,dimension,delay,number_of_pattern,points = 0){
lengthW=0
point_time=point_value=c(1:length(serie))
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbols <- definePatterns(dimension)
elements <- formationPattern(serie,dimension,delay,2)
index <- formationPattern(serie,dimension,delay,3)
for(i in 1:n_symbols){
if(all(p_patterns[i,]==symbols[number_of_pattern,])){
if(points==0){
lengthW = lengthW + 1
point_value[lengthW]=elements[i,1]
point_time[lengthW]=index[i,1]
}
else{
for(j in 1:dimension){
lengthW=lengthW+1
point_value[lengthW]=elements[i,j]
point_time[lengthW]=index[i,j]
}
}
}
}
if(lengthW!=0){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5)) +
geom_point(aes(x=point_time[1:lengthW],y=point_value[1:lengthW]),color="blue")
}else{
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
}
histogram<-function(serie,dimension,delay){
fat=factorial(dimension)
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbol <- definePatterns(dimension)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbol[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbol)
}
histogramImage<-function(myImg,dimx,dimy,delx,dely,dimension=0){
if(!dimension){
dimension=dim(myImg)[1]
}
d = dimX*dimY
fat = factorial(d)
p_patterns <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension)
n_symbols <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension, 1)
symbols <- definePatterns(d)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbols[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbols)
}
d=Read_csv(2)
time_series(d)
patternsOnGraph(d,3,1,1)
histogram(d,3,1)
dados = Read_csv(2)
histogram(dados,3,1)
library(combinat)
library(combinat)
histogram(dados,3,1)
library(ggplot2)
library(ggplot2)
histogram(dados,3,1)
readingMPR(3)
library(ggplot2)
source(file.path('Entropys.R'))
source(file.path('Distances.R'))
source(file.path('Read.R'))
source(file.path('GraficoG.R'))
source(file.path('teste.R'))
readingMPR<-function(dimension,option=0){
if(dimension == 3){
continua = "continuaN6.txt"
trozo = "trozosN6.txt"
}
if(dimension == 4){
continua = "continuaN24.txt"
trozo = "trozosN24.txt"
}
if(dimension == 5){
continua = "continuaN120.txt"
trozo = "trozosN120.txt"
}
if(dimension == 6){
continua = "continuaN720.txt"
trozo = "trozosN720.txt"
}
curva1x = Read_txt2(continua,1)
if(option==1) return(curva1x)
curva1y = Read_txt2(continua,2)
if(option==2) return(curva1y)
curva2x = Read_txt2(trozo,1)
if(option==3) return(curva2x)
curva2y = Read_txt2(trozo,2)
if(option==4) return(curva2y)
}
# Partition indicates the number of parts in which we divide the series
partitionMPR<-function(series,dimension,delay,partition){
complexity = entropy = rep(0,partition)
div = floor(length(series)/partition)
if(partition != 1){
for(i in 1:partition){
initial = ((i-1)*div)
end = initial + div
if(i == 1){
initial = 1
end = div
}
aux = series[initial:end]
probability = distribution(aux,dimension,delay)
entropy[i] = shannonEntropyNormalized(probability)
complexity[i] = C(probability)
}
}
else{
probability = distribution(series,dimension,delay)
entropy = shannonEntropyNormalized(probability)
complexity = C(probability)
}
print(entropy)
print(complexity)
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
qplot(x=c2x,y=c2y,geom="line",xlab="Shannon Entropy",ylab="MPR Statistical Complexity") +
ggtitle("Plane Complexity Entropy") + theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x,c1y)) + geom_point(aes(x=entropy,y=complexity),color="blue")
}
readingMPR(3)
getwd()
setwd("C:/Users/Eduarda/Dropbox/LaCCAN/GITHUB/Ler e gera grÃ¡ficos em R")
readingMPR(3)
partitionMPR(dados,3,1,1)
library(combinat)
library(ggplot2)
library(dygraphs)
time_series<-function(serie){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
interactiveGraph-function(serie){
dygraph(a,main="Graphic of time series",xlab="Time",ylab="Serie")
}
#Points == 0 -> first point
#Points != 0 -> all points
patternsOnGraph<-function(serie,dimension,delay,number_of_pattern,points = 0){
lengthW=0
point_time=point_value=c(1:length(serie))
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbols <- definePatterns(dimension)
elements <- formationPattern(serie,dimension,delay,2)
index <- formationPattern(serie,dimension,delay,3)
for(i in 1:n_symbols){
if(all(p_patterns[i,]==symbols[number_of_pattern,])){
if(points==0){
lengthW = lengthW + 1
point_value[lengthW]=elements[i,1]
point_time[lengthW]=index[i,1]
}
else{
for(j in 1:dimension){
lengthW=lengthW+1
point_value[lengthW]=elements[i,j]
point_time[lengthW]=index[i,j]
}
}
}
}
if(lengthW!=0){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5)) +
geom_point(aes(x=point_time[1:lengthW],y=point_value[1:lengthW]),color="blue")
}else{
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
}
histogram<-function(serie,dimension,delay){
fat=factorial(dimension)
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbol <- definePatterns(dimension)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbol[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbol)
}
histogramImage<-function(myImg,dimx,dimy,delx,dely,dimension=0){
if(!dimension){
dimension=dim(myImg)[1]
}
d = dimX*dimY
fat = factorial(d)
p_patterns <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension)
n_symbols <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension, 1)
symbols <- definePatterns(d)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbols[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbols)
}
library(combinat)
library(ggplot2)
library(dygraphs)
time_series<-function(serie){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
interactiveGraph-function(serie){
dygraph(a,main="Graphic of time series",xlab="Time",ylab="Serie")
}
#Points == 0 -> first point
#Points != 0 -> all points
patternsOnGraph<-function(serie,dimension,delay,number_of_pattern,points = 0){
lengthW=0
point_time=point_value=c(1:length(serie))
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbols <- definePatterns(dimension)
elements <- formationPattern(serie,dimension,delay,2)
index <- formationPattern(serie,dimension,delay,3)
for(i in 1:n_symbols){
if(all(p_patterns[i,]==symbols[number_of_pattern,])){
if(points==0){
lengthW = lengthW + 1
point_value[lengthW]=elements[i,1]
point_time[lengthW]=index[i,1]
}
else{
for(j in 1:dimension){
lengthW=lengthW+1
point_value[lengthW]=elements[i,j]
point_time[lengthW]=index[i,j]
}
}
}
}
if(lengthW!=0){
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5)) +
geom_point(aes(x=point_time[1:lengthW],y=point_value[1:lengthW]),color="blue")
}else{
qplot(x=c(1:length(serie)),y=serie,geom="line",xlab="Time",ylab="Serie") +
ggtitle("Graphic of time serie") + theme(plot.title = element_text(hjust=0.5))
}
}
histogram<-function(serie,dimension,delay){
fat=factorial(dimension)
p_patterns <- formationPattern(serie,dimension,delay)
n_symbols <- dim(p_patterns)[1]
symbol <- definePatterns(dimension)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbol[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbol)
}
histogramImage<-function(myImg,dimx,dimy,delx,dely,dimension=0){
if(!dimension){
dimension=dim(myImg)[1]
}
d = dimX*dimY
fat = factorial(d)
p_patterns <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension)
n_symbols <- formationPatternsImage(myImg,dimX,dimY,delX,delY,dimension, 1)
symbols <- definePatterns(d)
index_rep=array(0,n_symbols)
for(i in 1:n_symbols){
for(j in 1:fat){
if(all(p_patterns[i,]==symbols[j, ])){
index_rep[i]=j
break
}
}
}
index_rep=index_rep[1:n_symbols]
p = qplot(index_rep,geom="histogram",xlab="Patterns",ylab="Density",binwidth=1) +
ggtitle("Histogram of the patterns") + theme(plot.title = element_text(hjust=0.5))
plot(p)
print(symbols)
}
histogram(dados,3,1)
patternsOnGraph(dados,3,1,1)
patternsOnGraph(dados,3,1,2)
patternsOnGraph(dados,3,1,3)
patternsOnGraph(dados,3,1,4)
patternsOnGraph(dados,3,1,5)
patternsOnGraph(dados,3,1,6)
patternsOnGraph(dados,3,1,6)
readingMPR(3)
partitionMPR(dados,3,1,1)
window<-gtkWindow()
window["title"]<-"wnaetw GUI"
vbox <- gtkVBoxNew(FALSE,8)
vbox$setBorderWidth(24)
window$add(vbox)
hbox<-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label <- gtkLabelNew("Welcome Lazy Student!
Which file do you want to analyze ?")
hbox$packStart(label,FALSE,FALSE,0)
vbox$packStart(gtkHSeparatorNew(),FALSE,FALSE,0)
hbox <-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label<-gtkLabelNewWithMnemonic("_File name")
hbox$packStart(label,FALSE,FALSE,0)
filename<-gtkEntryNew()
filename$setWidthChars(50)
label$setMnemonicWidget(filename)
hbox$packStart(filename,FALSE,FALSE,0)
buttonOpen<-gtkButtonNewFromStock("gtk-open")
gSignalConnect(buttonOpen,"clicked",openFile)
hbox$packStart(buttonOpen,FALSE,FALSE,0)
library(RGtk2)
window<-gtkWindow()
window["title"]<-"wnaetw GUI"
vbox <- gtkVBoxNew(FALSE,8)
vbox$setBorderWidth(24)
window$add(vbox)
hbox<-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label <- gtkLabelNew("Welcome Lazy Student!
Which file do you want to analyze ?")
hbox$packStart(label,FALSE,FALSE,0)
vbox$packStart(gtkHSeparatorNew(),FALSE,FALSE,0)
hbox <-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label<-gtkLabelNewWithMnemonic("_File name")
hbox$packStart(label,FALSE,FALSE,0)
filename<-gtkEntryNew()
filename$setWidthChars(50)
label$setMnemonicWidget(filename)
hbox$packStart(filename,FALSE,FALSE,0)
buttonOpen<-gtkButtonNewFromStock("gtk-open")
gSignalConnect(buttonOpen,"clicked",openFile)
hbox$packStart(buttonOpen,FALSE,FALSE,0)
window<-gtkWindow()
window["title"]<-"wnaetw GUI"
vbox <- gtkVBoxNew(FALSE,8)
vbox$setBorderWidth(24)
window$add(vbox)
hbox<-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label <- gtkLabelNew("Welcome Lazy Student!
Which file do you want to analyze ?")
hbox$packStart(label,FALSE,FALSE,0)
vbox$packStart(gtkHSeparatorNew(),FALSE,FALSE,0)
hbox <-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label<-gtkLabelNewWithMnemonic("_File name")
hbox$packStart(label,FALSE,FALSE,0)
filename<-gtkEntryNew()
filename$setWidthChars(50)
label$setMnemonicWidget(filename)
hbox$packStart(filename,FALSE,FALSE,0)
buttonOpen<-gtkButtonNewFromStock("gtk-open")
gSignalConnect(buttonOpen,"clicked",filename)
hbox$packStart(buttonOpen,FALSE,FALSE,0)
window<-gtkWindow()
window["title"]<-"wnaetw GUI"
vbox <- gtkVBoxNew(FALSE,8)
vbox$setBorderWidth(24)
window$add(vbox)
hbox<-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label <- gtkLabelNew("Welcome Lazy Student!
Which file do you want to analyze ?")
hbox$packStart(label,FALSE,FALSE,0)
vbox$packStart(gtkHSeparatorNew(),FALSE,FALSE,0)
hbox <-gtkHBoxNew(FALSE,8)
vbox$packStart(hbox,FALSE,FALSE,0)
label<-gtkLabelNewWithMnemonic("_File name")
hbox$packStart(label,FALSE,FALSE,0)
filename<-gtkEntryNew()
filename$setWidthChars(50)
label$setMnemonicWidget(filename)
hbox$packStart(filename,FALSE,FALSE,0)
buttonOpen<-gtkButtonNewFromStock("gtk-open")
gSignalConnect(buttonOpen,"clicked",openFile)
hbox$packStart(buttonOpen,FALSE,FALSE,0)
