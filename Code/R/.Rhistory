set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
plot(modelo.lp1)solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
print(solucao)
max
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max = c(dados[1,5],dados[2,5])
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, max)
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
plot(modelo.lp1)solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
print(solucao)
max
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max1 =dados[1,5]
max2 = dados[2,5]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, max)
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
plot(modelo.lp1)solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
print(solucao)
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max1 =dados[1,5]
max2 = dados[2,5]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, c(max1,max2))
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
plot(modelo.lp1)solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
print(solucao)
max1
c(max1,max2)
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max1 =dados[[1,5]]
max2 = dados[[2,5]]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, c(max1,max2))
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
plot(modelo.lp1)solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
print(solucao)
max1
max2
c(max1,max2)
max = dados[1:2,5]
max
max = dados[1:2,4]
max
max = dados[1:2,5]
max
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max = dados[1:2,5]
max
mode(max)
max[1]
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max = dados[1:2,5]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, max)
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max = dados[1:2,5]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, max)
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max = dados[1:2,5]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, max)
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
set.objfn(modelo.lp1, max)
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
plot(modelo.lp1)solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
print(modelo.lp1)
plot(modelo.lp1)
solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)solucao<-as.data.frame(resultado)
print(modelo.lp1)
plot(modelo.lp1)
solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)
solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
print(solucao)
library("lpSolveAPI")
#Leitura da entrada dos dados
dados = read.table("entrada.txt")
coef1 = dados[1:dim(dados)[1],1]
coef2 = dados[1:dim(dados)[1],2]
desigualdade = dados[1:dim(dados)[1],3]
obj = dados[1:dim(dados)[1],4]
max = dados[1:2,5]
opcao = dados[1:dim(dados)[1],6]
dados = data.frame(coef1,coef2,desigualdade,obj,opcao)
#Solução do sistema linear
modelo.lp1 <- make.lp(0, 2)
name.lp(modelo.lp1, "Sistema linear")
if(toString(dados$desigualdade[1]) == "Max"){
lp.control(modelo.lp1, sense="max")
}else{
lp.control(modelo.lp1, sense="min")
}
set.objfn(modelo.lp1, max)
set.bounds(modelo.lp1, lower = c(0,0), upper = c(Inf, Inf))
set.type(modelo.lp1, c(1,2), type = c("real"))
for(i in 1:dim(dados)[1]){
add.constraint(modelo.lp1, c(dados$coef1[i],dados$coef2[i]), toString(dados$desigualdade[1]), dados$obj)
}
print(modelo.lp1)
png("grafico.png")
plot(modelo.lp1)
dev.off()
solve(modelo.lp1)
resultado<-get.primal.solution(modelo.lp1)
print(resultado)
solucao<-as.data.frame(resultado)
#Coloca os nomes nas colunas e nas linhas da tabela
names(solucao)<-c("Valores")
rownames(solucao)<-c("Função Objetivo", "Variável de folga 1","Variável de folga 2",
"Variável de folga 3","Solução X1", "Solução X2")
#Mostra os resultados com os nomes
write.table(solucao,"Solucao.txt")
ceiling(100/7)
100/7
floor(100/7)
?factor
?read.csv
install.packages(tidyr)
install.packages("tidyr")
wide_df <- data.frame(c("x","y"),c(1,4),c(2,5),c(3,6))
colnames(wide_df) <- c("col","A","B","C")
wide_df
long_df <- gather(wide_df,my_key,my_val,-col)
library(tidyr)
long_df <- gather(wide_df,my_key,my_val,-col)
long_df
long_df <- spread(long_df,my_key,my_val)
long_df
inf_df <- data.frame(Name=c("jake","Alice","Tim","Denise"),
age = c(34,55,76,19)
brown = c(0,0,1,0)
blue = c(0,1,0,0)
other = c(1,0,0,1)
height = c(61,59,57))
inf_df <- data.frame(Name=c("jake","Alice","Tim","Denise"),
age = c(34,55,76,19),
brown = c(0,0,1,0),
blue = c(0,1,0,0),
other = c(1,0,0,1),
height = c(61,59,57))
inf_df <- data.frame(Name=c("jake","Alice","Tim","Denise"),
age = c(34,55,76,19),
brown = c(0,0,1,0),
blue = c(0,1,0,0),
other = c(1,0,0,1),
height = c(61,59,57))
inf_df <- data.frame(Name=c("jake","Alice","Tim","Denise"),
age = c(34,55,76,19),
brown = c(0,0,1,0),
blue = c(0,1,0,0),
other = c(1,0,0,1),
height = c(61,59,57,51))
gather(inf_df, color, value, -c(Name,age,height))
inf_df <- gather(inf_df, color, value, -c(Name,age,height))
treatments <- data.frame(patient = c("X","Y","X","Y","X","Y"),
treatment = c("A","A","B","B","C","C"),
year_mo = c("2010-10", "2010-10","2012-08","2012-08","2014-12","2014-12"),
response = c(1,4,2,5,3,6))
separate(treatments,year_mo,c("year","month"))
install.packages("dplyr")
install.packages("dplyr")
separate(treatments,year_mo,c("year","month"))
library(tidyr)
separate(treatments,year_mo,c("year","month"))
library(tidyr)
separate(treatments,year_mo,c("year","month"))
treatments <- separate(treatments,year_mo,c("year","month"))
treatments <- unite(treatments,year_mo,year,month)
treatments
install.packages("lubridate")
library(lubridate)
library(lubridate)
ymd("2015-08-25")
ymd("2015 August 25")
mdy("August 25, 2015")
hms("13:33:09")
ymd_hms("2015/08/25 13:33:09")
str_trim("    this is a test    ")
?strtrim
?str_trim
install.packages(stringr)
install.packages("stringr")
install.packages("stringr")
library(stringr)
library(stringr)
str_trim("    this is a test    ")
str_pad("24493",width=7,side="left",pad="0")
friends <- c("Sarah","Tom","Alice")
str_detect(friends,"Alice")
str_replace(friends,"Alice","David")
tolower("I AM TALKING LOUDLY!")
toupper("I am whipering...")
df <- data.frame(A = c(1,NA,8,NA),B=c(3,NA,88,23),C=c(2,45,3,1))
is.na(df)
any(is.na(df))
sum(is.na(df))
na.omit(df)
df <- data.frame(A = c(1,NA,8,NA),B=c(3,NA,88,23),C=c(2,45,3,1))
df
na.omit(df)
df[is.na(df)] <- 0
df
?norm
?rnorm
setwd("C:/Users/Eduarda/Dropbox/LaCCAN/GITHUB/Time_series_analysis_R/Code/R")
setwd("C:/Users/Eduarda/Dropbox/LaCCAN/GITHUB/Time_series_analysis_R/Code/R")
data = c(2, 5, 1, 2, 7, 1, 1, 3, 1, 2, 4, 5, 1, 3, 2, 4, 4, 2, 2, 1, 0)
d = 3
t = 1
formationPattern<-function(serie,dimension,delay,option){
n_symbols = i = 1
n = length(serie)
p_patterns = elements = matrix(nrow=n,ncol=dimension)
index = c(0:(dimension-1))
while(i <= n){
first = i
if((i+dimension-1)<=n){
elements[n_symbols,] = serie[i:(i+dimension-1)]
p_patterns[n_symbols,] = index[order(elements[n_symbols,])]
i = first + delay
n_symbols = n_symbols + 1
}else break
}
if(option == 0){
p_patterns = na.omit(p_patterns)
p_patterns[1:dim(p_patterns)[1],]
}else{
elements = na.omit(elements)
elements[1:dim(elements)[1],]
}
}
X = formationPattern(data,d,t,1)
X
X[5,]
duplicated(X[5,])
isTRUE(duplicated(X[5,]))
formationPattern<-function(serie,dimension,delay,option){
n_symbols = i = 1
n = length(serie)
p_patterns = elements = matrix(nrow=n,ncol=dimension)
index = c(0:(dimension-1))
while(i <= n){
first = i
if((i+dimension-1)<=n){
elements[n_symbols,] = serie[i:(i+dimension-1)]
aux = duplicated(elements[n_symbols,])
if(length(aux[aux==TRUE])){
print("duplicado")
}else{
p_patterns[n_symbols,] = index[order(elements[n_symbols,])]
}
i = first + delay
n_symbols = n_symbols + 1
}else break
}
if(option == 0){
p_patterns = na.omit(p_patterns)
p_patterns[1:dim(p_patterns)[1],]
}else{
elements = na.omit(elements)
elements[1:dim(elements)[1],]
}
}
X
formationPattern(data,d,t,1)
formationPattern<-function(serie,dimension,delay,option){
n_symbols = i = 1
n = length(serie)
p_patterns = elements = matrix(nrow=n,ncol=dimension)
index = c(0:(dimension-1))
while(i <= n){
first = i
if((i+dimension-1)<=n){
elements[n_symbols,] = serie[i:(i+dimension-1)]
aux = duplicated(elements[n_symbols,])
if(length(aux[aux==TRUE])){
print(n_symbols)
}else{
p_patterns[n_symbols,] = index[order(elements[n_symbols,])]
}
i = first + delay
n_symbols = n_symbols + 1
}else break
}
if(option == 0){
p_patterns = na.omit(p_patterns)
p_patterns[1:dim(p_patterns)[1],]
}else{
elements = na.omit(elements)
elements[1:dim(elements)[1],]
}
}
X
formationPattern(data,d,t,1)
duplicated(c(7,1,1))
formationPattern(data,d,t,0)
order(c(7,1,1))
data = c(2, 5, 1, 2, 7, 1, 1, 3, 1, 2, 4, 5, 1, 3, 2, 4, 4, 2, 2, 1, 0)
d = 3
t = 1
formationPattern<-function(serie,dimension,delay,option){
n_symbols = i = 1
n = length(serie)
p_patterns = elements = matrix(nrow=n,ncol=dimension)
index = c(0:(dimension-1))
while(i <= n){
first = i
if((i+dimension-1)<=n){
elements[n_symbols,] = serie[i:(i+dimension-1)]
aux = duplicated(elements[n_symbols,])
p_patterns[n_symbols,] = index[order(elements[n_symbols,])]
i = first + delay
n_symbols = n_symbols + 1
}else break
}
if(option == 0){
p_patterns = na.omit(p_patterns)
p_patterns[1:dim(p_patterns)[1],]
}else{
elements = na.omit(elements)
elements[1:dim(elements)[1],]
}
}
X = formationPattern(data,d,t,0)
X
X+1
