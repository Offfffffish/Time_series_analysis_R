equalitiesValues<-function(button)
{
option = 0
inicializableOption(option)
}
distribution<-function(button)
{
option = 1
inicializableOption(option)
}
entropy<-function(button)
{
option = 7
inicializableOption(option)
}
hcPlane<-function(button)
{
option = 8
inicializableOption(option)
}
plane<-function(button)
{
option = 0
inicializableOption(option)
}
patterns<-function(button)
{
option = 3
inicializableOption(option)
}
histogram<-function(button)
{
option = 1
inicializableOption(option)
}
gSignalConnect(choose, "clicked", fileChoose)
gSignalConnect(op1, "clicked", shannon)
gSignalConnect(op2, "clicked", tsallis)
gSignalConnect(op3, "clicked", renyi)
gSignalConnect(op4, "clicked", euclidian)
gSignalConnect(op5, "clicked", quadratic)
gSignalConnect(op6, "clicked", manhattan)
gSignalConnect(op7, "clicked", chebyshev)
gSignalConnect(op8, "clicked", hellinger)
gSignalConnect(op9, "clicked", jensen)
gSignalConnect(op10, "clicked", wootter)
gSignalConnect(op11, "clicked", kullback)
gSignalConnect(op12, "clicked", complexity)
gSignalConnect(op13, "clicked", min)
gSignalConnect(op14, "clicked", saa)
gSignalConnect(op15, "clicked", pip)
gSignalConnect(op16, "clicked", paa)
gSignalConnect(op17, "clicked", BPWeigth)
gSignalConnect(op18, "clicked", equalitiesValues)
gSignalConnect(op19, "clicked", distribution)
gSignalConnect(op20, "clicked", entropy)
gSignalConnect(op21, "clicked", hcPlane)
gSignalConnect(op22, "clicked", plane)
gSignalConnect(op23, "clicked", patterns)
gSignalConnect(op24, "clicked", histogram)
require(RGtk2)
window <- gtkWindow()
window["title"] <- "Time Series Analysis"
dados
frame <- gtkFrameNew()
window$add(frame)
box1 <- gtkVBoxNew()
box1$setBorderWidth(80)
frame$add(box1)
boxLabel <- gtkHBoxNew(homogeneous = FALSE,spacing= 10) #distance between elements
boxLabel$setBorderWidth(40)
box1$packStart(boxLabel)
boxH1 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH1$setBorderWidth(0)
box1$packStart(boxH1)
boxH2 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH2$setBorderWidth(0)
box1$packStart(boxH2)
boxH3 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH3$setBorderWidth(0)
box1$packStart(boxH3)
boxH4 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH4$setBorderWidth(0)
box1$packStart(boxH4)
boxH5 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH5$setBorderWidth(0)
box1$packStart(boxH5)
boxH6 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH6$setBorderWidth(0)
box1$packStart(boxH6)
boxH7 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH7$setBorderWidth(0)
box1$packStart(boxH7)
boxH8 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH8$setBorderWidth(0)
box1$packStart(boxH8)
boxH9 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH9$setBorderWidth(0)
box1$packStart(boxH9)
boxH10 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH10$setBorderWidth(0)
box1$packStart(boxH10)
boxH11 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH11$setBorderWidth(0)
box1$packStart(boxH11)
boxH12 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH12$setBorderWidth(0)
box1$packStart(boxH12)
boxH13 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH13$setBorderWidth(0)
box1$packStart(boxH13)
boxH14 <- gtkHBoxNew(homogeneous = TRUE,spacing= 0) #distance between elements
boxH14$setBorderWidth(0)
box1$packStart(boxH14)
filename<-gtkEntryNew()
filename$setText("Time Series name")
boxLabel$packStart(filename,FALSE,FALSE,0)
choose <- gtkButton("Choose file") #button choose file
boxLabel$packStart(choose)
op1 <- gtkButton("Shannon Entropy")
boxH1$packStart(op1,fill=T)
op2 <- gtkButton("Tsallis Entropy")
boxH2$packStart(op2,fill=T)
op3 <- gtkButton("Renyi Entropy")
boxH3$packStart(op3,fill=T)
op4 <- gtkButton("Euclidian Distance")
boxH4$packStart(op4,fill=T)
op5 <- gtkButton("Quadratic Euclidian Distance")
boxH5$packStart(op5,fill=T)
op6 <- gtkButton("Manhattan Distance")
boxH6$packStart(op6,fill=T)
op7 <- gtkButton("Chebyshev Distance")
boxH7$packStart(op7,fill=T)
op8 <- gtkButton("Hellinger Distance")
boxH8$packStart(op8,fill=T)
op9 <- gtkButton("Jensen Divergence")
boxH9$packStart(op9,fill=T)
op10 <- gtkButton("Wootter Distance")
boxH10$packStart(op10,fill=T)
op11 <- gtkButton("Kullback Leibler Divergence")
boxH11$packStart(op11,fill=T)
op12 <- gtkButton("Statistical Complexity")
boxH12$packStart(op12,fill=T)
op13 <- gtkButton("Permutation Min Entropy")
boxH1$packStart(op13,fill=T)
op14 <- gtkButton("Symbolic Aggregate Approximation")
boxH2$packStart(op14,fill=T)
op15 <- gtkButton("Perceptually Important Points")
boxH3$packStart(op15,fill=T)
op16 <- gtkButton("Piecewise Aggregate Approximation")
boxH4$packStart(op16,fill=T)
op17 <- gtkButton("Bandt and Pompe Weigth")
boxH5$packStart(op17,fill=T)
op18 <- gtkButton("Equalities Values")
boxH6$packStart(op18,fill=T)
op19 <- gtkButton("Distribution")
boxH7$packStart(op19,fill=T)
op20 <- gtkButton("Entropy Plane")
boxH8$packStart(op20,fill=T)
op21 <- gtkButton("HC Plane")
boxH9$packStart(op21,fill=T)
op22 <- gtkButton("Time Series Plane")
boxH10$packStart(op22,fill=T)
op23 <- gtkButton("Patterns on Graph")
boxH11$packStart(op23,fill=T)
op24 <- gtkButton("Histogram")
boxH12$packStart(op24,fill=T)
readData<-function(){
return(read.table("DataTables/ddt.txt"))
}
inicializableOption<-function(option){
write.table(option,"DataTables/option.txt")
showOptions(option)
}
showOptions<-function(option){
if(option ==1){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Dimension:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Delay:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 2){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Dimension:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Delay:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Q:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 3){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Pattern:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Points:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 4){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Letters:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Partitions:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 5){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Number of points:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 6){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Partitions:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 7){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Dimension:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Delay:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Q:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Partitions:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Distribution:")
boxH13$packStart(label,FALSE,FALSE,0)
typesDistribution<-rGtkDataFrame(c("Band and Pompe" , "Bandt and Pompe weigth"))
combobox1 <- gtkComboBox(typesDistribution)
crt1 <- gtkCellRendererText()
combobox1$packStart(crt1)
combobox1$addAttribute(crt1, "text", 0)
gtkComboBoxSetActive(combobox1,0)
label$setMnemonicWidget(combobox1)
boxH13$packStart(combobox1,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Entropy:")
boxH13$packStart(label,FALSE,FALSE,0)
typesDistribution<-rGtkDataFrame(c("Shannon" , "Tsallis", "Renyi", "Min entropy"))
combobox1 <- gtkComboBox(typesDistribution)
crt1 <- gtkCellRendererText()
combobox1$packStart(crt1)
combobox1$addAttribute(crt1, "text", 0)
gtkComboBoxSetActive(combobox1,0)
label$setMnemonicWidget(combobox1)
boxH13$packStart(combobox1,FALSE,FALSE,0)
}else if(option == 8){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Dimension:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Delay:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Partitions:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}else if(option == 9){
boxH13 = gtkHBoxNew(FALSE,8)
box1$packStart(boxH13, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Result:")
boxH13$packStart(label,FALSE,FALSE,0)
avar = gtkEntryNew()
avar$setWidthChars(5)
label$setMnemonicWidget(avar)
boxH13$packStart(avar,FALSE,FALSE,0)
}
}
fileChoose<- function(button){
data = Read_csv(2)
write.table(data,"DataTables/ddt.txt")
showOptions()
}
shannon<-function(button)
{
option = 1
inicializableOption(option)
}
tsallis<-function(button)
{
option = 2
inicializableOption(option)
}
renyi<-function(button)
{
option = 2
inicializableOption(option)
}
euclidian<-function(button)
{
option = 1
inicializableOption(option)
}
quadratic<-function(button)
{
option = 1
inicializableOption(option)
}
manhattan<-function(button)
{
option = 1
inicializableOption(option)
}
chebyshev<-function(button)
{
option = 1
inicializableOption(option)
}
hellinger<-function(button)
{
option = 1
inicializableOption(option)
}
jensen<-function(button)
{
option = 1
inicializableOption(option)
}
wootter<-function(button)
{
option = 2
inicializableOption(option)
}
kullback<-function(button)
{
option = 2
inicializableOption(option)
}
complexity<-function(button)
{
option = 1
inicializableOption(option)
}
min<-function(button)
{
option = 1
inicializableOption(option)
}
saa<-function(button)
{
option = 4
inicializableOption(option)
}
pip<-function(button)
{
option = 5
inicializableOption(option)
}
paa<-function(button)
{
option = 6
inicializableOption(option)
}
BPWeigth<-function(button)
{
option = 1
inicializableOption(option)
}
equalitiesValues<-function(button)
{
option = 0
inicializableOption(option)
}
distribution<-function(button)
{
option = 1
inicializableOption(option)
}
entropy<-function(button)
{
option = 7
inicializableOption(option)
}
hcPlane<-function(button)
{
option = 8
inicializableOption(option)
}
plane<-function(button)
{
option = 0
inicializableOption(option)
}
patterns<-function(button)
{
option = 3
inicializableOption(option)
}
histogram<-function(button)
{
option = 1
inicializableOption(option)
}
gSignalConnect(choose, "clicked", fileChoose)
gSignalConnect(op1, "clicked", shannon)
gSignalConnect(op2, "clicked", tsallis)
gSignalConnect(op3, "clicked", renyi)
gSignalConnect(op4, "clicked", euclidian)
gSignalConnect(op5, "clicked", quadratic)
gSignalConnect(op6, "clicked", manhattan)
gSignalConnect(op7, "clicked", chebyshev)
gSignalConnect(op8, "clicked", hellinger)
gSignalConnect(op9, "clicked", jensen)
gSignalConnect(op10, "clicked", wootter)
gSignalConnect(op11, "clicked", kullback)
gSignalConnect(op12, "clicked", complexity)
gSignalConnect(op13, "clicked", min)
gSignalConnect(op14, "clicked", saa)
gSignalConnect(op15, "clicked", pip)
gSignalConnect(op16, "clicked", paa)
gSignalConnect(op17, "clicked", BPWeigth)
gSignalConnect(op18, "clicked", equalitiesValues)
gSignalConnect(op19, "clicked", distribution)
gSignalConnect(op20, "clicked", entropy)
gSignalConnect(op21, "clicked", hcPlane)
gSignalConnect(op22, "clicked", plane)
gSignalConnect(op23, "clicked", patterns)
gSignalConnect(op24, "clicked", histogram)
